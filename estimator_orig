<script>


var recRuns = [];
var recInnings = [];
var recIter = [];
var recRetVal = [];

var p = new Array(150);
var recDepth = 0;

var recScore = new Array(150);
var recAll = new Array(150);
var ways = new Array(150);

var recOuts = [];
var recBR   = [];
var recPerms   = [];

//var exact_cache = new Array(1000);

//  rfs - this implements the run frequency variables (RF_BBB_O) as a multi-dimensional array
//  making them more flexible for processing in loops, etc.
//  example : frequency of scoring at least 1 run from runner on 1st, 2 outs
//  RF_1xx_2 --> rfs[1][0][0][2]

var rfs = new Array(new Array(new Array(new Array(new Array(3))
                                       ,new Array(new Array(3)))
                             ,new Array(new Array(new Array(3))
                                       ,new Array(new Array(3))))
                   ,new Array(new Array(new Array(new Array(3))
                                       ,new Array(new Array(3)))
                             ,new Array(new Array(new Array(3))
                                       ,new Array(new Array(3)))))



var min_cache = new Array(new Array(new Array(new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))
                                             ,new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500)))
                                   ,new Array(new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))
                                             ,new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))))
                         ,new Array(new Array(new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))
                                             ,new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500)))
                                   ,new Array(new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))
                                             ,new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500)))))

var min_add_count = 0;
var min_use_count = 0;

var exact_cache = new Array(new Array(new Array(new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))
                                             ,new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500)))
                                   ,new Array(new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))
                                             ,new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))))
                         ,new Array(new Array(new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))
                                             ,new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500)))
                                   ,new Array(new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500))
                                             ,new Array(new Array(500)
                                                       ,new Array(500)
                                                       ,new Array(500)))))

var exact_add_count = 0;
var exact_use_count = 0;

// woolner_cache - emulates a multi-dimensional array
// used to cache the results of calculations performed using the pWoolnerStack function
// eliminates redundant calculations and enhamces performance

var woolner_cache = new Array( new Array(500)
							 , new Array(500)
							 , new Array(500)
							 , new Array(500)
							 , new Array(500)
							 , new Array(500)
							 , new Array(500)
							 , new Array(500)
							 , new Array(500)
							 , new Array(500))

// ob_perms_cache - used to cache the results of calculations using the ob_permutations function
// eliminates redundant calculations and enhamces performance

var ob_perm_cache = new Array(new Array(500), new Array(500), new Array(500)
								,new Array(500), new Array(500), new Array(500)
								,new Array(500), new Array(500), new Array(500)
								,new Array(500), new Array(500), new Array(500)
								)

var ob_add_count = 0;
var ob_use_count = 0;



// a function to handle exponentiation - e.g. 2^3 = myEXP(2,3)
function myEXP(parm_base,parm_exp)
{
t = 1;
 for(x = 1; x <= parm_exp; x++)
    {
     t = t * parm_base;
    }
return(t);
}

// function to prepopulate the values of the woolner_cache and ways_cache
function prepopulate_caches()
{
	// alert("about to prepopulater the caches");

	// prepopulate the woolner_cache array
	for (i = 1; i <= 9; i++)
	{
		for (r = 0; r <= 499; r++)
		{
			alertString = "["+i+"]["+r+"]";
	//		alert(alertString);
			woolner_cache[i][r] = -1;
		};
	};

	//prepopulate the ob_perm_cache
		for (o = 0; o <= 2; o++)
		{
			for (r=0; r<= 499; r++)
			{
				ob_perm_cache[o][r] = -1;
			}
		};

// prepopulate the exact_cache
	for (r1 = 0; r1 <= 1; r1++)
	{
		for (r2 = 0; r2 <= 1; r2++)
		{
			for (r3 = 0; r3 <= 1; r3++)
			{
				for (o = 0; o <= 2; o++)
				{
					for (r = 0; r <= 499; r++)
					{
						exact_cache[r1][r2][r3][o][r] = -1;
					}
				}
			}
		}
	}

// prepopulate min_cache
	for (r1 = 0; r1 <= 1; r1++)
	{
		for (r2 = 0; r2 <= 1; r2++)
		{
			for (r3 = 0; r3 <= 1; r3++)
			{
				for (o = 0; o <= 2; o++)
				{
					for (r = 0; r <= 499; r++)
					{
						min_cache[r1][r2][r3][o][r] = -1;
					}
				}
			}
		}
	}
}

</script>



function calcFreq()
{
valPA = valAB + valBB;
valTOB = valH + valBB;
val1B = valH - val2B - val3B - valHR;

valTB = valH + val2B + 2*val3B + 3*val3B;
valOUT = valAB - valH;

// create frequencies per PA for all variables
freqOBP = valTOB / valPA * 1.0;
freqBB = valBB / valPA * 1.0;
freq1B = val1B / valPA * 1.0;
freq2B = val2B / valPA * 1.0;
freq3B = val3B /valPA * 1.0;
freqHR = valHR / valPA * 1.0;
freqSO = valSO / valPA * 1.0;
freqOUT = 1.0 - freqOBP * 1.0;

freqH = valH / valPA * 1.0;
freqTB = freq1B + 2*freq2B + 3*freq3B + 4*freqHR;

// calculate number of PA per 27-out game
 freqPA = freqOBP/freqOUT * 27.0 + 27.0;

// percentage of non K outs to all outs
rateNonK_OUT = 1 - freqSO/freqOUT;

// SLG, BA
rateSLG = (freq1B + 2*freq2B + 3*freq3B + 4*freqHR) / (1 - freqBB);
rateBA = (freq1B + freq2B + freq3B + freqHR) / (1 - freqBB);

}


function reEngine()
{
// chance of *not* scoring for each state
// the variable name is of the form:
// - state_bb_o_r, where
// --- bb = base of the lead runner
// --- o = number of outs
// --- r = number of other runners on base
//

state_3b_2_2 = freqOUT;

state_3b_2_1 = state_3b_2_2*freqBB
			 + freqOUT;

state_3b_2_0 = state_3b_2_1*freqBB
			 + freqOUT;


state_3b_1_2 = state_3b_2_2*freqOUT*(1-rateNonK_OUT*eventOUT_state3B_1);

state_3b_1_1 = state_3b_1_2*freqBB
			 + state_3b_2_1*freqOUT*(1-rateNonK_OUT*eventOUT_state3B_1);

state_3b_1_0 = state_3b_1_1*freqBB
			 + state_3b_2_0*freqOUT*(1-rateNonK_OUT*eventOUT_state3B_1);


state_3b_0_2 = state_3b_1_2*freqOUT*(1-rateNonK_OUT*eventOUT_state3B_0);

state_3b_0_1 = state_3b_0_2*freqBB
			 + state_3b_1_1*freqOUT*(1-rateNonK_OUT*eventOUT_state3B_0);

state_3b_0_0 = state_3b_0_1*freqBB
			 + state_3b_1_0*freqOUT*(1-rateNonK_OUT*eventOUT_state3B_0);


state_2b_2_1 = state_3b_2_2*(freqBB+freq1B*(1-event1B_state2B_2))
			 + freqOUT;

state_2b_2_0 = state_2b_2_1*freqBB
			 + state_3b_2_1*freq1B*(1-event1B_state2B_2)
			 + freqOUT;


state_2b_1_1 = state_3b_1_2*(freqBB+freq1B*(1-event1B_state2B_1))
			 + state_3b_2_1*freqOUT*rateNonK_OUT*eventOUT_state2B_1
			 + state_2b_2_1*freqOUT*(1-rateNonK_OUT*eventOUT_state2B_1);

state_2b_1_0 = state_2b_1_1*freqBB
			 + state_3b_1_1*freq1B*(1-event1B_state2B_1)
			 + state_3b_2_0*freqOUT*rateNonK_OUT*eventOUT_state2B_1
			 + state_2b_2_0*freqOUT*(1-rateNonK_OUT*eventOUT_state2B_1);


state_2b_0_1 = state_3b_0_2*(freqBB+freq1B*(1-event1B_state2B_0))
			 + state_3b_1_1*freqOUT*rateNonK_OUT*eventOUT_state2B_0
			 + state_2b_1_1*freqOUT*(1-rateNonK_OUT*eventOUT_state2B_0);

state_2b_0_0 = state_2b_0_1*freqBB
			 + state_3b_0_1*freq1B*(1-event1B_state2B_0)
			 + state_3b_1_0*freqOUT*rateNonK_OUT*eventOUT_state2B_0
			 + state_2b_1_0*freqOUT*(1-rateNonK_OUT*eventOUT_state2B_0);


state_1b_2_0 = state_2b_2_1*(freqBB+freq1B*(1-event1B_state1B_2))
			 + state_3b_2_1*(freq1B*(event1B_state1B_2)+freq2B*(1-event2B_state1B_2))
			 + freqOUT;

state_1b_1_0 = state_2b_1_1*(freqBB+freq1B*(1-event1B_state1B_1))
             + state_3b_1_1*(freq1B*(event1B_state1B_1)+freq2B*(1-event2B_state1B_1))
			 + state_2b_2_0*freqOUT*rateNonK_OUT*eventOUT_state1B_1
             + state_1b_2_0*freqOUT*(1-rateNonK_OUT*eventOUT_state1B_1);

state_1b_0_0 = state_2b_0_1*(freqBB+freq1B*(1-event1B_state1B_0))
			 + state_3b_0_1*(freq1B*(event1B_state1B_0)+freq2B*(1-event2B_state1B_0))
			 + state_2b_1_0*freqOUT*rateNonK_OUT*eventOUT_state1B_0
			 + state_1b_1_0*freqOUT*(1-rateNonK_OUT*eventOUT_state1B_0);

// chance of scoring from a triple, single, double
//   The "_2" and "_1" extensions to each variable is required for the RE calculations
//   and is too long to myEXPlain here.  In short, its the number of outs in an inning
chance3B_3 = 1 - (state_3b_2_0 + state_3b_1_0 + state_3b_0_0) / 3.0;
chance2B_3 = 1 - (state_2b_2_0 + state_2b_1_0 + state_2b_0_0) / 3.0;
chance1B_3 = 1 - (state_1b_2_0 + state_1b_1_0 + state_1b_0_0) / 3.0;

chance3B_2 = 1 - (state_3b_2_0 + state_3b_1_0) / 2.0;
chance2B_2 = 1 - (state_2b_2_0 + state_2b_1_0) / 2.0;
chance1B_2 = 1 - (state_1b_2_0 + state_1b_1_0) / 2.0;

chance3B_1 = 1 - (state_3b_2_0) / 1.0;
chance2B_1 = 1 - (state_2b_2_0) / 1.0;
chance1B_1 = 1 - (state_1b_2_0) / 1.0;

// number of times a runner scores after getting on base from a HR, 3B, 2B, 1B, BB
runsHR = freqHR;
runs3B_3 = chance3B_3 * freq3B;
runs2B_3 = chance2B_3 * freq2B;
runs1B_3 = chance1B_3 * (freq1B + freqBB);

runs3B_2 = chance3B_2 * freq3B;
runs2B_2 = chance2B_2 * freq2B;
runs1B_2 = chance1B_2 * (freq1B + freqBB);

runs3B_1 = chance3B_1 * freq3B;
runs2B_1 = chance2B_1 * freq2B;
runs1B_1 = chance1B_1 * (freq1B + freqBB);

// total number of runs scored in a game
runsALL = (runsHR + runs3B_3 + runs2B_3 + runs1B_3) * freqPA ;

// the "bases empty" line for the Run Expectancy matrix, for 0, 1, 2 outs
rpi_3 = (runsHR + runs3B_3 + runs2B_3 + runs1B_3) * freqPA / 9.0 ;
rpi_2 = (runsHR + runs3B_2 + runs2B_2 + runs1B_2) * freqPA * 2.0/3.0 / 9.0 ;
rpi_1 = (runsHR + runs3B_1 + runs2B_1 + runs1B_1) * freqPA * 1.0/3.0 / 9.0 ;

// the rest of the run expectancy matrix
RE_1xx_0 = (1 - state_1b_0_0) + rpi_3;	RE_1xx_1 = (1 - state_1b_1_0) + rpi_2;	RE_1xx_2 = (1 - state_1b_2_0) + rpi_1;
RE_x2x_0 = (1 - state_2b_0_0) + rpi_3;	RE_x2x_1 = (1 - state_2b_1_0) + rpi_2;	RE_x2x_2 = (1 - state_2b_2_0) + rpi_1;
RE_xx3_0 = (1 - state_3b_0_0) + rpi_3;	RE_xx3_1 = (1 - state_3b_1_0) + rpi_2;	RE_xx3_2 = (1 - state_3b_2_0) + rpi_1;
RE_12x_0 = (1 - state_1b_0_0) + (1 - state_2b_0_1) + rpi_3;	RE_12x_1 = (1 - state_1b_1_0) + (1 - state_2b_1_1) + rpi_2;	RE_12x_2 = (1 - state_1b_2_0) + (1 - state_2b_2_1) + rpi_1;
RE_1x3_0 = (1 - state_1b_0_0) + (1 - state_3b_0_1) + rpi_3;	RE_1x3_1 = (1 - state_1b_1_0) + (1 - state_3b_1_1) + rpi_2;	RE_1x3_2 = (1 - state_1b_2_0) + (1 - state_3b_2_1) + rpi_1;
RE_x23_0 = (1 - state_2b_0_0) + (1 - state_3b_0_1) + rpi_3;	RE_x23_1 = (1 - state_2b_1_0) + (1 - state_3b_1_1) + rpi_2;	RE_x23_2 = (1 - state_2b_2_0) + (1 - state_3b_2_1) + rpi_1;
RE_123_0 = (1 - state_1b_0_0) + (1 - state_2b_0_1) + (1 - state_3b_0_2) + rpi_3;	RE_123_1 = (1 - state_1b_1_0) + (1 - state_2b_1_1) + (1 - state_3b_1_2) + rpi_2;	RE_123_2 = (1 - state_1b_2_0) + (1 - state_2b_2_1) + (1 - state_3b_2_2) + rpi_1;

// the "bases empty" line for the Run Frequency matrix, for 0, 1, 2 outs
RF_xxx_2 = (freqHR + freq3B*(1-state_3b_2_0) + freq2B*(1-state_2b_2_0) + (freq1B+freqBB)*(1-state_1b_2_0));
RF_xxx_1 = (freqHR + freq3B*(1-state_3b_1_0) + freq2B*(1-state_2b_1_0) + (freq1B+freqBB)*(1-state_1b_1_0)) + freqOUT*RF_xxx_2;
RF_xxx_0 = (freqHR + freq3B*(1-state_3b_0_0) + freq2B*(1-state_2b_0_0) + (freq1B+freqBB)*(1-state_1b_0_0)) + freqOUT*RF_xxx_1;

// the rest of the run frequency matrix
RF_1xx_0 = (1 - state_1b_0_0); RF_1xx_1 = (1 - state_1b_1_0); RF_1xx_2 = (1 - state_1b_2_0);
RF_x2x_0 = (1 - state_2b_0_0); RF_x2x_1 = (1 - state_2b_1_0); RF_x2x_2 = (1 - state_2b_2_0);
RF_xx3_0 = (1 - state_3b_0_0); RF_xx3_1 = (1 - state_3b_1_0); RF_xx3_2 = (1 - state_3b_2_0);
RF_12x_0 = (1 - state_2b_0_1); RF_12x_1 = (1 - state_2b_1_1); RF_12x_2 = (1 - state_2b_2_1);
RF_1x3_0 = (1 - state_3b_0_1); RF_1x3_1 = (1 - state_3b_1_1); RF_1x3_2 = (1 - state_3b_2_1);
RF_x23_0 = (1 - state_3b_0_1); RF_x23_1 = (1 - state_3b_1_1); RF_x23_2 = (1 - state_3b_2_1);
RF_123_0 = (1 - state_3b_0_2); RF_123_1 = (1 - state_3b_1_2); RF_123_2 = (1 - state_3b_2_2);


// wes - expanded run frequency matrix
// rfs[b1][b2][b3][out] is frequency of scoring (at least 1 run) from a base out state
//  through the end of the inning
// similar to the RF_BBB_O variables above

rfs[0][0][0][0] = (freqHR + freq3B*(1-state_3b_0_0) + freq2B*(1-state_2b_0_0) + (freq1B+freqBB)*(1-state_1b_0_0)) + freqOUT*RF_xxx_1;
rfs[0][0][0][1] = (freqHR + freq3B*(1-state_3b_1_0) + freq2B*(1-state_2b_1_0) + (freq1B+freqBB)*(1-state_1b_1_0)) + freqOUT*RF_xxx_2;
rfs[0][0][0][2] = (freqHR + freq3B*(1-state_3b_2_0) + freq2B*(1-state_2b_2_0) + (freq1B+freqBB)*(1-state_1b_2_0));

rfs[1][0][0][0] = (1 - state_1b_0_0);
rfs[1][0][0][1] = (1 - state_1b_1_0);
rfs[1][0][0][2] = (1 - state_1b_2_0);
rfs[0][1][0][0] = (1 - state_2b_0_0);
rfs[0][1][0][1] = (1 - state_2b_1_0);
rfs[0][1][0][2] = (1 - state_2b_2_0);
rfs[0][0][1][0] = (1 - state_3b_0_0);
rfs[0][0][1][1] = (1 - state_3b_1_0);
rfs[0][0][1][2] = (1 - state_3b_2_0);
rfs[1][1][0][0] = (1 - state_2b_0_1);
rfs[1][1][0][1] = (1 - state_2b_1_1);
rfs[1][1][0][2] = (1 - state_2b_2_1);
rfs[1][0][1][0] = (1 - state_3b_0_1);
rfs[1][0][1][1] = (1 - state_3b_1_1);
rfs[1][0][1][2] = (1 - state_3b_2_1);
rfs[0][1][1][0] = (1 - state_3b_0_1);
rfs[0][1][1][1] = (1 - state_3b_1_1);
rfs[0][1][1][2] = (1 - state_3b_2_1);
rfs[1][1][1][0] = (1 - state_3b_0_2);
rfs[1][1][1][1] = (1 - state_3b_1_2);
rfs[1][1][1][2] = (1 - state_3b_2_2);

}



//
// function - rf_min
// calculate the chance of scoring at least N runs from a given base/out state
// through the remainder of the inning

function rf_min(b1,b2,b3,out,runs)
{

	if (min_cache[b1][b2][b3][out][runs] >= 0)
	{
		min_use_count++;
		return min_cache[b1][b2][b3][out][runs];
	}

//	array to represent the baserunners
//	b[1] is the location of the lead runner, b[2] is location of a second runner, etc.

	var b = new Array(3);

	b[1] = 0;
	b[2] = 0;
	b[3] = 0;

	if (runs == 1)
	{
		alertString = "runs = 1  and br:"+b1+b2+b3+" and outs = "+out+" returning rfs["+b1+","+b2+","+b3+","+out+"] = "+rfs[b1][b2][b3][out];
//		alert(alertString);
		min_return = rfs[b1][b2][b3][out];
	};

	if (runs == 0)
	{
		alertString = "runs = 0; returning 1";
//		alert(alertString);
		min_return = 1;
	};

	// runs > 1

//		alert("runs > 1");
		br = b1+b2+b3;

		if (b3 == 1)
		{
			b[1] = 3;
		};
		if (b2 == 1)
		{
			if (b[1] > 0)
			{
				b[2] = 2;
			}
			else
			{
				b[1] = 2;
			};
		};

		if (b1 == 1)
		{
			if (b[2] > 0)
			{
				b[3] = 1;
			}
			else
			{
				if (b[1] > 0)
				{
					b[2] = 1;
				}
				else
				{
					b[1] = 1;
				}
			}
		};

		if (br >= runs)
		{ //  need to score the runner representing the final of the desired runs
		  //  e.g.  if looking to score 2 -> b[2], to score 3 -> b[3]
			if (runs == 3)
			{
				// chance of scoring from first (third runner)
				alertString = "(runs =  "+runs+" and br:"+b1+b2+b3+" and out = "+out+" returning rfs[1,0,0,out] = "+rfs[1][0][0][out];
//				alert(alertString);
				min_return = rfs[1][0][0][out];
			}
			else if (runs == 2)
			{
				if (b[2] == 2)
				{
					if (b[3] > 1)
					{
						alertString = "(runs =  "+runs+" and br:"+b1+b2+b3+" and out = "+out+" returning rfs[1,1,0,out] = "+rfs[1][1][0][out];
//						alert(alertString);
						min_return = rfs[1][1][0][out];
					}
					else
					{
						alertString = "(runs =  "+runs+" and br:"+b1+b2+b3+" and out = "+out+" returning rfs[0,1,0,out] = "+rfs[0][1][0][out];
//						alert(alertString);
						min_return = rfs[0][1][0][out];
					};
				}
				else
				{
					// second runner is on first
					alertString = "(runs =  "+runs+" and br:"+b1+b2+b3+" and out = "+out+" returning rfs[1,0,0,out] = "+rfs[1][0][0][out];
//					alert(alertString);
					min_return = rfs[1][0][0][out];
				};
			}  //  end of runs == 2;
		}
		else // br < runs
		{
			if ((runs - br) == 1)
			{
				min_return = rfs[0][0][0][out];
			}
			else // run - br > 1
			{
				chance = 0;

				for (o = out; o <= 2; o++)
				{
					chance = chance + myEXP(freqOBP, runs-br-1) * myEXP(freqOUT, o - out) * ob_permutations(o-out, runs-br-2, 0) * rfs[0][0][0][o];
				}

				alertString = "(runs =  "+runs+" and br:"+b1+b2+b3+" and out = "+out+" returning chance = "+chance;
//				alert(alertString);
				min_return = chance;
			}
		}  // end of else br < runs

//  need to populate cache here
	min_cache[b1][b2][b3][out][runs] = min_return;
	min_add_count++;
	return min_return;
}

//
//  function - rf_exact
//  calculate the chance of scoring exactly N runs from a given base/out state
//  example -  	chance of scoring exactly 3 runs from a runner on third, 2 out state
//  			rf_exact(0,0,1,2,3) = (chance of scoring at least 3) - (chance of scoring at least 4)

function rf_exact(b1, b2, b3, out, runs)
{
	if (exact_cache[b1][b2][b3][out][runs] >= 0)
	{
			exact_use_count++;
			return exact_cache[b1][b2][b3][out][runs];
	};

	r_value = rf_min(b1,b2,b3,out,runs);
	r1_value = rf_min(b1,b2,b3,out,runs + 1);

	ret_value = r_value - r1_value;

	if (r_value < r1_value)
	{
		alertString = "rf_min("+b1+","+b2+","+b3+","+out+","+runs+") = "+r_value;
		alertString = alertString + "rf_min("+b1+","+b2+","+b3+","+out+","+(runs+1)+") = "+r1_value;
//		alert(alertString);
	}

	//  need to populate cache here
		exact_cache[b1][b2][b3][out][runs] = ret_value;
		exact_add_count++;

	return ret_value;
}


function calcEstimators()
{
// this is for fun.  I calculate BaseRuns and basic Runs Created
	valA = freqBB + freq1B + freq2B + freq3B;
	valB = .8*freq1B + 2.0*freq2B + 3.2*freq3B + 1.8*freqHR + .1*freqBB;
	scoreRate = valB / (valB + freqOUT);
	BSR = (valA * scoreRate + freqHR) * freqPA;

	BJRC = freqOBP * (freq1B + 2*freq2B + 3*freq3B + 4*freqHR) * freqPA;

}


//
// function - ob_permutations
// calculate the number of combinations to get a specified number of baserunners and outs
// example 1 baserunner reaching in 2 outs
// 100, 010, 001 -->  3 combinations

function ob_permutations(outs, base_runners)
{

	// check the cache to see if weve calculated this value already
	// if so, return the cached value
	if (ob_perm_cache[outs][base_runners] >= 0)
	{
		ob_use_count = ob_use_count +1;
		return ob_perm_cache[outs][base_runners];
	};

	perms = 0;

	pa = base_runners + outs;

	if (base_runners == 0) {perms = 1};

	if (base_runners == 1) {perms = base_runners + outs};

	if (base_runners > 1)
	{
		if (outs == 0)
		{
			perms = 1;
		}
		else  // outs > 0 and base_runners > 1
		{
			recOuts.push(outs);
			recBR.push(base_runners);
			recPerms.push(perms);

			permResult = ob_permutations(outs , base_runners -1);

			perms = permResult + recPerms.pop();

			recPerms.push(perms);

			outs = recOuts.pop();
			base_runners = recBR.pop();

			recOuts.push(outs);
			recBR.push(base_runners);

			permResult = ob_permutations(outs - 1, base_runners );

			perms = permResult + recPerms.pop();

			outs = recOuts.pop();
			base_runners = recBR.pop();
		}
	}

	// cache the calculated value
	ob_perm_cache[outs][base_runners] = perms;
	ob_add_count = ob_add_count +1;
	return perms;
}


//
//  function pWoolnerStack
//
//  calculate the chance of scoring N runs over a specified number of innings
//  this is implemented following a formula presented
//  by Keith Woolner in the Baseball Prospectus 2005 ed.
//  "An Analytical Framework for Win Expectancy" p. 524
//  note : the stack is used to control variables during recursion

function pWoolnerStack(runs, innings)
{
	// check the cache to see if weve calculated this value already
	// if so, return the cached value
	if (woolner_cache[innings][runs] >= 0)
	{
		return woolner_cache[innings][runs];
	};

	if (innings == 0)
	{
//	alert("innings == 0");
		if (runs == 0)
		{
			retVal = 1;
		}
		else
		{
			retVal = 0;
		}
	}
	else
	{
//		alert("innings != 0");

		retVal = 0;

		iter = 0;
		while (iter <= runs)
		{
			alertString = "about to push onto stack runs = "+runs+" innings = "+innings+" iter = "+iter+" retVal = "+retVal;
//			alert(alertString);

			recIter.push(iter);
			recRetVal.push(retVal);
			recRuns.push(runs);
			recInnings.push(innings);

			recResult = pWoolnerStack(runs - iter, innings - 1);

			iter = recIter.pop();
//			retVal = recRetVal.pop() + p[iter] * recResult;
			retVal = recRetVal.pop() + rf_exact(0,0,0,0,iter) * recResult;
			runs = recRuns.pop();
			innings = recInnings.pop();

			iter = iter + 1;
		}
//		alert("were past the while loop")
	}

	alertString = "pWoolnerStack("+runs+","+innings+") = "+retVal;
//	alert(alertString);

	// cache the calculated value
	woolner_cache[innings][runs] = retVal;
	return(retVal);
}

function writeOutput()
{

var starttime = new Date();

document.writeln("<HTML><STYLE>th {	background-color: #CCCCCC;}</STYLE><BODY>");

document.writeln("<BR><B>Assumptions</B><BR>NO runners out on base<BR>NO basestealing");

document.writeln("<BR>&nbsp;<HR>");
document.writeln("<BR>",runsALL.toFixed(3)," : <B>Runs Scored per Game</B>");
document.writeln("<BR>&nbsp;");

document.writeln("<BR>",BSR.toFixed(3)," : Estimated, Runs Scored per Game, BaseRuns");
document.writeln("<BR>",BJRC.toFixed(3)," : Estimated, Runs Scored per Game, Bill James Runs Created");

document.writeln("<BR>&nbsp;<HR>");
document.writeln("<BR><B> AVG / OBP / SLG </B><BR>",rateBA.toFixed(3)," / ",freqOBP.toFixed(3)," / ",rateSLG.toFixed(3));

document.writeln("<BR>&nbsp;<HR>");
document.writeln("<BR><B>Chance of Scoring</B>");
document.writeln("<BR>The chance of the runner eventually scoring, after getting on from a batting event, based on the number of outs when he reached base.");
document.writeln("<BR><I>Note: This matches the corresponding lines in the Run Frequency Matrix. </I>");
document.writeln("<BR>&nbsp;");
document.writeln("<TABLE border=1 cellspacing=0 cellpadding=4>");
document.writeln("<TR><TH>Event</TH><TH>0 outs</TH><TH>1 out</TH><TH>2 outs</TH><TH>AVERAGE</TH>");
document.writeln("<TR><TH>1B/BB</TH><TD>",RF_1xx_0.toFixed(3),"</TD><TD>",RF_1xx_1.toFixed(3),"</TD><TD>",RF_1xx_2.toFixed(3),"</TD><TD>",chance1B_3.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>Double</TH><TD>",RF_x2x_0.toFixed(3),"</TD><TD>",RF_x2x_1.toFixed(3),"</TD><TD>",RF_x2x_2.toFixed(3),"</TD><TD>",chance2B_3.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>Triple</TH><TD>",RF_xx3_0.toFixed(3),"</TD><TD>",RF_xx3_1.toFixed(3),"</TD><TD>",RF_xx3_2.toFixed(3),"</TD><TD>",chance3B_3.toFixed(3),"</TD></TR>");
document.writeln("</TABLE>");

document.writeln("<BR>&nbsp;<HR>");
document.writeln("<BR><B>Run Expectancy Matrix</B>");
document.writeln("<BR>The average number of runs, from this base/out state, to the end of the inning.");
document.writeln("<BR>&nbsp;");
document.writeln("<TABLE border=1 cellspacing=0 cellpadding=4>");
document.writeln("<TR><TH>Bases</TH><TH>0 outs</TH><TH>1 out</TH><TH>2 outs</TH>");
document.writeln("<TR><TH>xxx</TH><TD>",rpi_3.toFixed(3),"</TD><TD>",rpi_2.toFixed(3),"</TD><TD>",rpi_1.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>1xx</TH><TD>",RE_1xx_0.toFixed(3),"</TD><TD>",RE_1xx_1.toFixed(3),"</TD><TD>",RE_1xx_2.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>x2x</TH><TD>",RE_x2x_0.toFixed(3),"</TD><TD>",RE_x2x_1.toFixed(3),"</TD><TD>",RE_x2x_2.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>xx3</TH><TD>",RE_xx3_0.toFixed(3),"</TD><TD>",RE_xx3_1.toFixed(3),"</TD><TD>",RE_xx3_2.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>12x</TH><TD>",RE_12x_0.toFixed(3),"</TD><TD>",RE_12x_1.toFixed(3),"</TD><TD>",RE_12x_2.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>1x3</TH><TD>",RE_1x3_0.toFixed(3),"</TD><TD>",RE_1x3_1.toFixed(3),"</TD><TD>",RE_1x3_2.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>x23</TH><TD>",RE_x23_0.toFixed(3),"</TD><TD>",RE_x23_1.toFixed(3),"</TD><TD>",RE_x23_2.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>123</TH><TD>",RE_123_0.toFixed(3),"</TD><TD>",RE_123_1.toFixed(3),"</TD><TD>",RE_123_2.toFixed(3),"</TD></TR>");
document.writeln("</TABLE>");


//  this is a revised version of the run frequency matrix using arrays...
document.writeln("<BR>&nbsp;<HR>");
document.writeln("<BR><B>Run Frequency Matrix</B>");
document.writeln("<BR>The chance of at least one run scoring, from this base/out state, at some point during the inning.");
document.writeln("<BR>-- If there is a runner on base, it's the chance that the lead runner will eventually score in the inning.");
document.writeln("<BR>-- If there is no runner on base, it's the chance that someone will reach base and score, at some point during the inning.");
document.writeln("<BR>&nbsp;");
document.writeln("<TABLE border=1 cellspacing=0 cellpadding=4>");
document.writeln("<TR><TH>Bases</TH><TH>0 outs</TH><TH>1 out</TH><TH>2 outs</TH>");

for (r3 = 0; r3 < 2; r3++)
{
	for (r2 = 0; r2 < 2; r2++)
	{
		for (r1 = 0; r1 < 2; r1++)
		{
			document.write("<TR>");
			document.write("<TH>");

			if (r1 == 0) {document.write("x");}else{document.write("1");}
			if (r2 == 0) {document.write("x");}else{document.write("2");}
			if (r3 == 0) {document.write("x");}else{document.write("3");}

			document.write("</TH>");

			for (outs = 0; outs < 3; outs++)
			{
				document.write("<TD>");
				document.write(rfs[r1][r2][r3][outs].toFixed(3));
				document.write("</TD>");
			}
			document.writeln("</TR>");
		}
	}

}
document.writeln("</TABLE>");


// write Expanded Run Frequency Matrix
//  this is the revised version of the expanded run frequency matrix using functions...

document.writeln("<BR>&nbsp;<HR>");
document.writeln("<BR><B>Expanded Run Frequency Matrix</B>");
document.writeln("<BR>The chance of scoring n runs, from this base/out state through the end of the inning.");
document.writeln("<BR>&nbsp;");
document.writeln("<TABLE border=1 cellspacing=0 cellpadding=4>");
document.write("<TR><TH>Bases</TH><TH>Outs</TH>");

for (runs = 0; runs <= 15; runs++)
{
	document.write("<TH>"+runs+"</TH>");
}
document.writeln("");

for (r3 = 0; r3 < 2; r3++)
{
	for (r2 = 0; r2 < 2; r2++)
	{
		for (r1 = 0; r1 < 2; r1++)
		{
			for (outs = 0; outs < 3; outs++)
			{

				document.write("<TR><TH>");
				if (r1 == 0) {document.write("x");}else{document.write("1");}
				if (r2 == 0) {document.write("x");}else{document.write("2");}
				if (r3 == 0) {document.write("x");}else{document.write("3");}

				document.write("</TH><TH>");
				document.write(outs);
				document.write("</TH>");
				for (runs = 0; runs <= 15; runs++)
				{
					document.write("<TD>");
					document.write(rf_exact(r1,r2,r3,outs,runs).toFixed(3));
					document.write("</TD>");
				}
				document.writeln("</TR>");
			}
		}
	}

}
document.writeln("</TABLE>");


// write WES Distribution
document.writeln("<BR>&nbsp;<HR>");
document.writeln("<BR><B>Full Game Run Distribution </B>");
document.writeln("<BR>The chance of scoring N runs in a 9 inning game. </B>");
document.writeln("<BR>&nbsp;");

prob = 1;
r = 0;
start = 0;
avg = 0;

if (runsALL <= 500)
{
	document.writeln("<TABLE border=1 cellspacing=0 cellpadding=4>");
	document.writeln("<TR><TH>Runs</TH><TH>Chance</TH></TR>");

	while ((prob >= .000001) || (start == 0))
	{
		prob = pWoolnerStack(r,9);
		if (prob >= .000001)
		{
			if (start == 0)
			{
				start = 1;
			}
		}
		document.writeln("<TR><TH>"+r+"</TH><TD>",prob.toFixed(6),"</TD></TR>");
		avg = avg + (r*prob);
		r++;
	}

	document.writeln("</TABLE>");

	document.writeln("<BR/>");
	document.writeln("average RPG based on run dist = "+avg.toFixed(3));

}
else // runsALL > 500 - suppress generation of distribution
{
	document.writeln("<BR/>Your Run environment is porjected to score > 500 Runs/Game.");
	document.writeln("<BR/>Generation of the per Game Run Scoring Distribution has been suppressed.");
}

var endtime = new Date();

document.writeln("<BR/>");

//document.writeln("ob_add_count = "+ob_add_count+"   ob_use_count = "+ob_use_count);
//document.writeln("<BR/>");
//document.writeln("min_add_count = "+min_add_count+"   min_use_count = "+min_use_count);
//document.writeln("<BR/>");
//document.writeln("exact_add_count = "+exact_add_count+"   exact_use_count = "+exact_use_count);
//document.writeln("<BR/>");

//document.writeln("start time = "+starttime+"   end time = "+endtime);
//document.writeln("<BR/>");

}


function writeLWTS()
{

document.writeln("<BR>&nbsp;<HR>");
document.writeln("<BR><B>Marginal Run Values by Event</B>, i.e. Linear Weights ");
document.writeln("<BR>The number of additional runs scored if one more of a particular event occurred (according to the various models).  That is, if a team was able to hit one more single in the game in this ",runsALL.toFixed(1)," runs per game environment, this team would score ",lwts1B.toFixed(3)," more runs.");
document.writeln("<BR><I>Note: It's not exactly 1 more, since that'll change the run environment.  We're looking at the rate of change as we approach adding zero.  For all intents and purposes, treat it as adding one to the run environment.</I>");
document.writeln("<BR>&nbsp;");
document.writeln("<TABLE border=1 cellspacing=0 cellpadding=4>");
document.writeln("<TR><TH>Event</TH><TH>Markov</TH><TH>BaseRuns</TH><TH>Runs Created</TH>");
document.writeln("<TR><TH>Walk</TH><TD>",lwtsBB.toFixed(3),"</TD><TD>",bsrBB.toFixed(3),"</TD><TD>",bjrcBB.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>Single</TH><TD>",lwts1B.toFixed(3),"</TD><TD>",bsr1B.toFixed(3),"</TD><TD>",bjrc1B.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>Double</TH><TD>",lwts2B.toFixed(3),"</TD><TD>",bsr2B.toFixed(3),"</TD><TD>",bjrc2B.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>Triple</TH><TD>",lwts3B.toFixed(3),"</TD><TD>",bsr3B.toFixed(3),"</TD><TD>",bjrc3B.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>Homerun</TH><TD>",lwtsHR.toFixed(3),"</TD><TD>",bsrHR.toFixed(3),"</TD><TD>",bjrcHR.toFixed(3),"</TD></TR>");
document.writeln("<TR><TH>Out, sans K</TH><TD>",lwtsOUT.toFixed(3),"</TD><TD>&nbsp;</TD><TD>&nbsp;</TD></TR>");
document.writeln("<TR><TH>Strikeout</TH><TD>",(lwtsOUT+lwtsSO).toFixed(3),"</TD><TD>&nbsp;</TD><TD>&nbsp;</TD></TR>");
document.writeln("</TABLE>");
document.writeln("<P> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ");
document.writeln("<P>The run values below are what you would use if you wanted to create a <I>Runs Created</I>-type calculation.  <UL><LI>Linear Weights shows the run values relative to the existing context, and therefore, is a zero-sum game.  <LI>Runs Created shows the absolute number of runs created.</UL>");
document.writeln("",rcOUT.toFixed(3)," : Runs Created OUT, excludes strikeouts");
document.writeln("<BR>",(rcOUT+lwtsSO).toFixed(3)," : Runs Created SO");
document.writeln("<BR>&nbsp;<HR>");

document.writeln("</BODY></HTML>");

}

function calcRuns(theForm)
{
// transfers the values from the form to variables
valAB = theForm.inAB.value * 1.0;
valH = theForm.inH.value * 1.0;
val2B = theForm.in2B.value * 1.0;
val3B = theForm.in3B.value * 1.0;
valHR = theForm.inHR.value * 1.0;
valBB = theForm.inBB.value * 1.0;
valSO = theForm.inSO.value * 1.0;

event1B_state1B_0 = theForm.in_event1B_state1B_0.value;	event1B_state1B_1 = theForm.in_event1B_state1B_1.value;	event1B_state1B_2 = theForm.in_event1B_state1B_2.value;
event1B_state2B_0 = theForm.in_event1B_state2B_0.value;	event1B_state2B_1 = theForm.in_event1B_state2B_1.value;	event1B_state2B_2 = theForm.in_event1B_state2B_2.value;
event2B_state1B_0 = theForm.in_event2B_state1B_0.value;	event2B_state1B_1 = theForm.in_event2B_state1B_1.value;	event2B_state1B_2 = theForm.in_event2B_state1B_2.value;
eventOUT_state1B_0 = theForm.in_eventOUT_state1B_0.value;	eventOUT_state1B_1 = theForm.in_eventOUT_state1B_1.value;	eventOUT_state1B_2 = theForm.in_eventOUT_state1B_2.value;
eventOUT_state2B_0 = theForm.in_eventOUT_state2B_0.value;	eventOUT_state2B_1 = theForm.in_eventOUT_state2B_1.value;	eventOUT_state2B_2 = theForm.in_eventOUT_state2B_2.value;
eventOUT_state3B_0 = theForm.in_eventOUT_state3B_0.value;	eventOUT_state3B_1 = theForm.in_eventOUT_state3B_1.value;	eventOUT_state3B_2 = theForm.in_eventOUT_state3B_2.value;

// processing data to determine
// - runs scored per game
// - run Expectancy matrix
calcFreq();
reEngine();
calcEstimators();

prepopulate_caches();

writeOutput();

// calculate LWTS
baselineR = runsALL;
baselinePA = freqPA;
baselineBSR = BSR;
baselineBJRC = BJRC;
pebble = freqPA / 100.0;

valBB = valBB + pebble;
calcFreq();
reEngine();
calcEstimators();
lwtsBB = ((runsALL - baselineR) / (freqPA - baselinePA) );
bsrBB = ((BSR - baselineBSR) / (freqPA - baselinePA) );
bjrcBB = ((BJRC - baselineBJRC) / (freqPA - baselinePA) );
valBB = valBB - pebble;

valAB = valAB + pebble;
valH = valH + pebble;
calcFreq();
reEngine();
calcEstimators();
lwts1B = ((runsALL - baselineR) / (freqPA - baselinePA) );
bjrc1B = ((BJRC - baselineBJRC) / (freqPA - baselinePA) );
bsr1B = ((BSR - baselineBSR) / (freqPA - baselinePA) );

val2B = val2B + pebble;
calcFreq();
reEngine();
calcEstimators();
lwts2B = ((runsALL - baselineR) / (freqPA - baselinePA) );
bsr2B = ((BSR - baselineBSR) / (freqPA - baselinePA) );
bjrc2B = ((BJRC - baselineBJRC) / (freqPA - baselinePA) );
val2B = val2B - pebble;

val3B = val3B + pebble;
calcFreq();
reEngine();
calcEstimators();
lwts3B = ((runsALL - baselineR) / (freqPA - baselinePA) );
bsr3B = ((BSR - baselineBSR) / (freqPA - baselinePA) );
bjrc3B = ((BJRC - baselineBJRC) / (freqPA - baselinePA) );
val3B = val3B - pebble;

valHR = valHR + pebble;
calcFreq();
reEngine();
calcEstimators();
lwtsHR = ((runsALL - baselineR) / (freqPA - baselinePA) );
bsrHR = ((BSR - baselineBSR) / (freqPA - baselinePA) );
bjrcHR = ((BJRC - baselineBJRC) / (freqPA - baselinePA) );
valHR = valHR - pebble;
valH = valH - pebble;
valAB = valAB - pebble;

valSO = valSO + pebble;
calcFreq();
reEngine();
calcEstimators();
lwtsSO = (runsALL - baselineR) / pebble;
valSO = valSO - pebble;

lwtsOUT =
- (freqBB*lwtsBB
+ freq1B*lwts1B
+ freq2B*lwts2B
+ freq3B*lwts3B
+ freqHR*lwtsHR
+ freqSO*lwtsSO
) / freqOUT;

rcOUT = lwtsOUT + runsALL/27;

writeLWTS();


}
